{"version":3,"file":"static/js/117.4d57f1e2.chunk.js","mappings":"gKAIA,MAOMA,EAAW,CACf,KACA,QACA,OACA,iDACA,sCACA,YACA,UACA,oBACA,kDACA,iBACA,qBACA,OACA,QACA,gCACA,UAqBIC,EAAYC,IAAsB,IAArB,YAAEC,GAAaD,EAChC,MAGOE,EAAKC,IAAcC,EAAAA,EAAAA,UAAS,IAC5BC,EAASC,IAAiBF,EAAAA,EAAAA,UAASN,EAASI,KAC5CK,EAAMC,IAAcJ,EAAAA,EAAAA,UAAS,IAC7BK,EAAUC,IAAeN,EAAAA,EAAAA,WAAS,GAuBzC,MAhDkBO,EAACC,EAAUC,KAC7B,MAAMC,GAAgBC,EAAAA,EAAAA,WAEtBC,EAAAA,EAAAA,YAAU,KACRF,EAAcG,QAAUL,CAAQ,GAC/B,CAACA,KAEJI,EAAAA,EAAAA,YAAU,KACR,GAAIH,EAAO,CACT,MAAMK,EAAKC,aAAY,KACrBL,EAAcG,SAAS,GACtBJ,GACH,MAAO,IAAMO,cAAcF,EAC7B,CACA,MAAO,MAAQ,GACd,CAACL,GAAO,EAYXF,EAAY,KACV,IAAIU,EAASnB,EACToB,EAAUf,EACVA,EAXO,IAWQT,EAASI,GAAKqB,SAC/BF,GAAU,EACVC,EAAU,GAERD,IAAWvB,EAASyB,OAClBtB,GACFE,EAAW,GACXK,EAAW,IAEXE,GAAY,IAGdJ,EAAcR,EAASuB,GAAQG,MAAM,EAAGF,IACxCnB,EAAWkB,GACXb,EAAWc,EAAU,GACvB,GACCb,EA1BW,GA0BQ,OAGpBgB,EAAAA,EAAAA,KAAA,OACEC,UAAU,mBACVC,OA5EgBC,EA4EIvB,EAzEb,mEACDwB,KAAKD,IAAyB,IAAhBA,EAAKL,OAwEM,CAAC,EAAI,CAAEO,MAAO,QAC7CC,aAAcA,IAAMrB,GAAY,GAChCsB,aAAcA,IAAO9B,EAAMJ,EAASyB,QAAWb,GAAY,GAAMuB,UAEjEC,EAAAA,EAAAA,MAAA,KAAGC,KAAK,8BAA6BF,SAAA,EACnCR,EAAAA,EAAAA,KAAA,QAAAQ,SAAO5B,KACPoB,EAAAA,EAAAA,KAAA,QAAAQ,SAAM,oBAlFQL,KAoFZ,EAIV7B,EAAUqC,aAAe,CACvBnC,aAAa,GAOf,U,cC7FA,MAoBA,EApBgBoC,KACdZ,EAAAA,EAAAA,KAACa,EAAAA,EAAI,CACHC,MAAM,UACNC,YAAY,8DAA6DP,UAEzEC,EAAAA,EAAAA,MAAA,WAASR,UAAU,OAAOR,GAAG,UAASe,SAAA,EACpCR,EAAAA,EAAAA,KAAA,UAAAQ,UACER,EAAAA,EAAAA,KAAA,OAAKC,UAAU,QAAOO,UACpBR,EAAAA,EAAAA,KAAA,MAAI,cAAY,UAASQ,UAACR,EAAAA,EAAAA,KAACgB,EAAAA,GAAI,CAACC,GAAG,WAAUT,SAAC,mBAGlDC,EAAAA,EAAAA,MAAA,OAAKR,UAAU,WAAUO,SAAA,EACvBR,EAAAA,EAAAA,KAAA,KAAAQ,SAAG,sDACHR,EAAAA,EAAAA,KAAC1B,EAAS,QAEZ0B,EAAAA,EAAAA,KAACkB,EAAAA,EAAY,Q","sources":["components/Contact/EmailLink.js","pages/Contact.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n// Validates the first half of an email address.\r\nconst validateText = (text) => {\r\n  // NOTE: Passes RFC 5322 but not tested on google's standard.\r\n  // eslint-disable-next-line no-useless-escape\r\n  const re = /^(([^<>()\\[\\]\\.,;:\\s@\\\"]+(\\.[^<>()\\[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))$/;\r\n  return re.test(text) || text.length === 0;\r\n};\r\n\r\nconst messages = [\r\n  'hi',\r\n  'hello',\r\n  'hola',\r\n  'you-can-email-me-at-literally-anything! Really',\r\n  'well, not anything. But most things',\r\n  'like-this',\r\n  'or-this',\r\n  'but not this :(  ',\r\n  'you.can.also.email.me.with.specific.topics.like',\r\n  'just-saying-hi',\r\n  'please-work-for-us',\r\n  'help',\r\n  'admin',\r\n  'or-I-really-like-your-website',\r\n  'thanks',\r\n];\r\n\r\nconst useInterval = (callback, delay) => {\r\n  const savedCallback = useRef();\r\n\r\n  useEffect(() => {\r\n    savedCallback.current = callback;\r\n  }, [callback]);\r\n\r\n  useEffect(() => {\r\n    if (delay) {\r\n      const id = setInterval(() => {\r\n        savedCallback.current();\r\n      }, delay);\r\n      return () => clearInterval(id);\r\n    }\r\n    return () => {}; // pass linter\r\n  }, [delay]);\r\n};\r\n\r\nconst EmailLink = ({ loopMessage }) => {\r\n  const hold = 50; // ticks to wait after message is complete before rendering next message\r\n  const delay = 50; // tick length in mS\r\n\r\n  const [idx, updateIter] = useState(0); // points to current message\r\n  const [message, updateMessage] = useState(messages[idx]);\r\n  const [char, updateChar] = useState(0); // points to current char\r\n  const [isActive, setIsActive] = useState(true); // disable when all messages are printed\r\n\r\n  useInterval(() => {\r\n    let newIdx = idx;\r\n    let newChar = char;\r\n    if (char - hold >= messages[idx].length) {\r\n      newIdx += 1;\r\n      newChar = 0;\r\n    }\r\n    if (newIdx === messages.length) {\r\n      if (loopMessage) {\r\n        updateIter(0);\r\n        updateChar(0);\r\n      } else {\r\n        setIsActive(false);\r\n      }\r\n    } else {\r\n      updateMessage(messages[newIdx].slice(0, newChar));\r\n      updateIter(newIdx);\r\n      updateChar(newChar + 1);\r\n    }\r\n  }, isActive ? delay : null);\r\n\r\n  return (\r\n    <div\r\n      className=\"inline-container\"\r\n      style={validateText(message) ? {} : { color: 'red' }}\r\n      onMouseEnter={() => setIsActive(false)}\r\n      onMouseLeave={() => (idx < messages.length) && setIsActive(true)}\r\n    >\r\n      <a href=\"mailto:rtguinanao@gmail.com\">\r\n        <span>{message}</span>\r\n        <span>@gmail.com</span>\r\n      </a>\r\n    </div>\r\n  );\r\n};\r\n\r\nEmailLink.defaultProps = {\r\n  loopMessage: false,\r\n};\r\n\r\nEmailLink.propTypes = {\r\n  loopMessage: PropTypes.bool,\r\n};\r\n\r\nexport default EmailLink;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport Main from '../layouts/Main';\r\nimport EmailLink from '../components/Contact/EmailLink';\r\nimport ContactIcons from '../components/Contact/ContactIcons';\r\n\r\nconst Contact = () => (\r\n  <Main\r\n    title=\"Contact\"\r\n    description=\"Contact Raphaelle Guinanao via email @ rtguinanao@gmail.com\"\r\n  >\r\n    <article className=\"post\" id=\"contact\">\r\n      <header>\r\n        <div className=\"title\">\r\n          <h2 data-testid=\"heading\"><Link to=\"/contact\">Contact</Link></h2>\r\n        </div>\r\n      </header>\r\n      <div className=\"email-at\">\r\n        <p>Feel free to get in touch. You can email me at: </p>\r\n        <EmailLink />\r\n      </div>\r\n      <ContactIcons />\r\n    </article>\r\n  </Main>\r\n);\r\n\r\nexport default Contact;\r\n"],"names":["messages","EmailLink","_ref","loopMessage","idx","updateIter","useState","message","updateMessage","char","updateChar","isActive","setIsActive","useInterval","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","newIdx","newChar","length","slice","_jsx","className","style","text","test","color","onMouseEnter","onMouseLeave","children","_jsxs","href","defaultProps","Contact","Main","title","description","Link","to","ContactIcons"],"sourceRoot":""}